export PROMPT_COMMAND="history -a;history -c;history -r;$PROMPT_COMMAND"

SOURCE="${BASH_SOURCE[0]}"
while [[ -h "$SOURCE" ]]; do # resolve $SOURCE until the file is no longer a symlink
  DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
  SOURCE="$(readlink "$SOURCE")"
  [[ "$SOURCE" != /* ]] && SOURCE="$DIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
done
DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
export dotfiles="${DIR%bash*}"

alias reload='. $HOME/.bashrc'

export BROWSER=open
alias chrome="/Applications/Google\ Chrome.app/Contents/MacOS/Google\ Chrome"

# Source ~/.localrc if it exists
[[ -e "$HOME"/.localrc ]] && . "$HOME"/.localrc
[[ -f "$dotfiles"bash/bash-sensible/sensible.bash ]] && . "$dotfiles"/bash/bash-sensible/sensible.bash

if [[ -n "$TMUX" ]]; then
  refresh() {
    export "$(tmux show-environment | grep '^SSH_AUTH_SOCK')"
  }
else
  refresh() { exit 1; }
fi

# Base16 Shell (doesn't work in Terminal.app)
BASE16_SHELL="$HOME/.config/base16-shell/scripts"
alias dark=". \$BASE16_SHELL/base16-solarized-dark.sh"
alias light=". \$BASE16_SHELL/base16-solarized-light.sh"
[[ -d "$BASE16_SHELL" ]] && [[ -n "$ITERM_SESSION_ID" ]] && light

# Path
export PATH=.git/safe/../../bin
# export PATH="$PATH:./bin"
export PATH="$PATH:$HOME/bin"
export PATH="$PATH:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/bin:/sbin"
export PATH="$PATH:/usr/local/share/git-core/contrib/credential/netrc"
# export PATH="$PATH:`yarn bin`"
# export PATH="$PATH:$HOME/.yarn/bin"
# export PATH="$PATH:$HOME/.config/yarn/global/node_modules/.bin"

# Go
export GOPATH=$HOME/go
export PATH=$PATH:$GOPATH/bin


# Colors
RED="$(tput setaf 1)"
GREEN="$(tput setaf 2)"
YELLOW="$(tput setaf 3)"
BLUE="$(tput setaf 4)"
MAGENTA="$(tput setaf 5)"
CYAN="$(tput setaf 6)"
WHITE="$(tput setaf 7)"
GRAY="$(tput setaf 8)"
BOLD="$(tput bold)"
UNDERLINE="$(tput sgr 0 1)"
INVERT="$(tput sgr 1 0)"
NOCOLOR="$(tput sgr0)"
export RED
export GREEN
export YELLOW
export BLUE
export MAGENTA
export CYAN
export WHITE
export GRAY
export BOLD
export UNDERLINE
export INVERT
export NOCOLOR

# GPGTools
# export GPG_TTY=$(tty)
# export PINENTRY_USER_DATA="USE_CURSES=1"

# if [[ -n "$SSH_CONNECTION" ]]; then
#   export PINENTRY_USER_DATA="USE_CURSES=1"
# fi

# Anybar
anybar() {
  if [[ "$1" = 'open' ]]; then
    open /Applications/AnyBar.app; exit
  fi
  printf "%s" "${1:-white}" | nc -4u -w0 localhost "${2:-1738}"
}

# asdf
# For brew version:
# [[ -f "/usr/local/opt/asdf/asdf.sh" ]] && . /usr/local/opt/asdf/asdf.sh
# [[ -f "/usr/local/etc/bash_completion.d/asdf.bash" ]] && . /usr/local/etc/bash_completion.d/asdf.bash
# For manual install
[[ -f "$HOME/.asdf/asdf.sh" ]] && . "$HOME/.asdf/asdf.sh"
[[ -f "$HOME/.asdf/completions/asdf.bash" ]] && . "$HOME/.asdf/completions/asdf.bash"

# Docker
# alias d='docker'
# alias dc='docker-compose'

# Editor
if [[ -f "$(which nvim)" ]]; then
  export EDITOR='nvim'
elif [[ -f "$(which mvim)" ]]; then
  export EDITOR='mvim -v'
elif [[ -f "$(which vim)" ]]; then
  export EDITOR='vim'
else
  export EDITOR='vi'
fi
alias e="\$EDITOR"

# FZF
export FZF_DEFAULT_COMMAND='ag -g ""'
[[ -f "$HOME/.fzf.bash" ]] && . "$HOME/.fzf.bash"

# Git
[[ -f "$(which hub)" ]] && alias git='hub'
alias g='git'
complete -o default -o nospace -F _git g

if [[ -f "$(which hitch)" ]]; then
  alias unhitch='hitch --unhitch'
  hitch() {
    command hitch "$@"
    [[ -s "$HOME/.hitch_export_authors" ]] && . "$HOME/.hitch_export_authors"
  }
fi





if [[ -f "$(which brew)" ]]; then
  if [[ -d "$(brew --prefix)"/etc/bash_completion.d/ ]]; then
    for f in "$(brew --prefix)"/etc/bash_completion.d/*; do
      . "$f"
    done
  fi
fi

if [[ -d /usr/share/bash-completion/completions/ ]]; then
  for f in /usr/share/bash-completion/completions/*; do
    . "$f"
  done
fi


# GnuPG
GPG_TTY="$(tty)"
export GPG_TTY

# Heroku
export PATH="$PATH:/usr/local/heroku/bin"
alias h='heroku'
alias s='staging'
alias p='production'

# Homebrew
export HOMEBREW_CASK_OPTS="--appdir=/Applications"

# Ruby
alias b='bundle'
alias be='bundle exec'
alias bi='bundle install'
alias bu='bundle update'
alias f='foreman'
alias fb='foreman run bundle exec'
alias fr='foreman run'
alias fs='foreman start'
alias r='rake'

# AWS
if [[ -s "$HOME"/.awsam/bash.rc ]]; then
  export AWS_DEFAULT_USER=ubuntu
  . "$HOME"/.awsam/bash.rc
fi

#ec2-find() {
#  aws ec2 describe-instances --filters Name=tag-value,Values=*$1* | grep "$1\|InstanceId" | uniq | sed -e 's/^[ \t\]*//' -e 's/,//g' | paste - -
#}

# System
colours() {
  for i in {0..255}; do
    printf "%s" "\x1b[38;5;${i}m${i} "
  done
  unset i
}
fixcamera() {
  sudo killall VDCAssistant
}
publicip() {
  curl https://api.ipify.org
}
alias c='caffeinate -d'
alias cta='caffeinate -d tmux at'
alias fliptable='echo （╯°□°）╯︵ ┻━┻'
alias lc='launchctl'
alias ll='ls -al'
alias lock='/System/Library/CoreServices/Menu\ Extras/User.menu/Contents/Resources/CGSession -suspend'
alias sound='afplay /System/Library/Sounds/Glass.aiff'
alias ssh_up='systemsetup -setremotelogin on'
alias ssh_down='systemsetup -setremotelogin off'

# Tmux
alias tmux='tmux -2'

# Vagrant
alias v='vagrant'

# Yarn
alias y='yarn'

. "$dotfiles"bash/prompt.bash
. "$dotfiles"bash/completions/*

[ -f ~/.fzf.bash ] && source ~/.fzf.bash
